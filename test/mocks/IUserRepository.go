// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/blog-platform/domain"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// ActivateAccount provides a mock function with given fields: idStr
func (_m *IUserRepository) ActivateAccount(idStr string) error {
	ret := _m.Called(idStr)

	if len(ret) == 0 {
		panic("no return value specified for ActivateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Demote provides a mock function with given fields: idStr
func (_m *IUserRepository) Demote(idStr string) error {
	ret := _m.Called(idStr)

	if len(ret) == 0 {
		panic("no return value specified for Demote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: idStr
func (_m *IUserRepository) Fetch(idStr string) (domain.User, error) {
	ret := _m.Called(idStr)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(idStr)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(idStr)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByEmail provides a mock function with given fields: email
func (_m *IUserRepository) FetchByEmail(email string) (domain.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FetchByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByUsername provides a mock function with given fields: username
func (_m *IUserRepository) FetchByUsername(username string) (domain.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FetchByUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: idStr
func (_m *IUserRepository) Promote(idStr string) error {
	ret := _m.Called(idStr)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idStr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: user
func (_m *IUserRepository) Register(user *domain.User) (domain.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (domain.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) domain.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// NewIUserRepository creates a new mock implementation of IUserRepository for use in tests.
// It registers the provided testing interface and sets up automatic expectation assertions during test cleanup.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
